//*** Prisma generator configuration

// Database source configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Application-related models
model Movie {
  id           Int            @id @unique @default(autoincrement())
  imageString  String
  title        String
  age          Int
  duration     Float
  overview     String
  release      Int
  videoSource  String
  category     String
  cast         String
  genres       String
  WatchLists   WatchList[] // Relation to WatchList model
  WatchHistory WatchHistory[]
  createdAt    DateTime       @default(now())
}

model WatchList {
  id      String @id @default(uuid())
  userId  String
  movieId Int
  Movie   Movie? @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model WatchHistory {
  id           String   @id @default(uuid())
  userId       String
  WatchHistory String
  videoSource  String
  Movie        Movie?   @relation(fields: [movieId], references: [id])
  movieId      Int?
  createdAt    DateTime @default(now())
}
