// Prisma generator configuration
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Database source configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

// User-related models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId],name: "provider_providerAccountId")
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[] // Relation to Account model
  sessions      Session[] // Relation to Session model

  @@schema("auth")
}

// Application-related models
model Movie {
  id           Int            @id @unique @default(autoincrement())
  imageString  String
  title        String         @unique
  age          Int
  duration     Float
  overview     String
  release      Int
  videoSource  String
  category     String
  cast         String
  genres       String
  WatchLists   WatchList[] // Relation to WatchList model

  createdAt DateTime @default(now())

  @@schema("public")

  WatchHistory WatchHistory[]
}

model WatchList {
  id     String @id @default(uuid())
  userId String @unique
  movieId Int? @unique
  Movie   Movie? @relation(fields: [movieId], references: [id])

  @@schema("public")
}

model WatchHistory {
  id           String @id @default(uuid())
  userId       String
  WatchHistory String
  videoSource  String

  Movie   Movie? @relation(fields: [movieId], references: [id])
  movieId Int?

  createdAt DateTime @default(now())

  @@schema("public")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@schema("public")
}
